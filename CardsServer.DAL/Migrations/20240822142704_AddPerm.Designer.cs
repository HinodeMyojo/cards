// <auto-generated />
using CardsServer.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CardsServer.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240822142704_AddPerm")]
    partial class AddPerm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CardsServer.BLL.Entity.AvatarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Редактирование всех записей",
                            Title = "EditAllObject"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Удаление всех записей",
                            Title = "DeleteAllObject"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Получение всех записей",
                            Title = "GetAllObject"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Получение своих записей",
                            Title = "GetOwnObject"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Создание своих записей",
                            Title = "CreateOwnObject"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Редактирование своих записей",
                            Title = "EditOwnObject"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Удаление своих записей",
                            Title = "DeleteOwnObject"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Пользователь"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Модератор"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.StatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Действует"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Заблокирован"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Удален"
                        });
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionEntityRoleEntity", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolesPermissions", (string)null);
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.AvatarEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.UserEntity", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("CardsServer.BLL.Entity.AvatarEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.StatusEntity", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PermissionEntityRoleEntity", b =>
                {
                    b.HasOne("CardsServer.BLL.Entity.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardsServer.BLL.Entity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.StatusEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CardsServer.BLL.Entity.UserEntity", b =>
                {
                    b.Navigation("Avatar");
                });
#pragma warning restore 612, 618
        }
    }
}
